<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Chris Kirkland</title>
    <link>https://chriskirkland.github.io/chriskirkland.us/post/</link>
    <description>Recent content in Posts on Chris Kirkland</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016. All rights reserved</copyright>
    <lastBuildDate>Mon, 20 Jun 2016 08:52:25 -0500</lastBuildDate>
    
	<atom:link href="https://chriskirkland.github.io/chriskirkland.us/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Welcome</title>
      <link>https://chriskirkland.github.io/chriskirkland.us/post/welcome/</link>
      <pubDate>Mon, 20 Jun 2016 08:52:25 -0500</pubDate>
      
      <guid>https://chriskirkland.github.io/chriskirkland.us/post/welcome/</guid>
      <description>Welcome to my new website powered generated by Hugo, created by spf13, with the theme Blackburn. This will serve as both my professional webpage and semi-professional blog. Professionally, the blog will follow my experiences working with OpenStack and developing in Python/Bash/Golang. Additionally, I will probably blog about my time spent studying Go.
For backgroud information, see the About Me page.</description>
    </item>
    
    <item>
      <title>#!/bin/bash</title>
      <link>https://chriskirkland.github.io/chriskirkland.us/post/bash-customization/</link>
      <pubDate>Thu, 11 May 2017 16:06:56 -0500</pubDate>
      
      <guid>https://chriskirkland.github.io/chriskirkland.us/post/bash-customization/</guid>
      <description>Motivation My name is Chris, and I have a problem. Hi, Chris.
In all seriousness, I&amp;rsquo;m not sure I would call it a problem but I am (admittedly) obsessive when it comes to efficiency in my every day life. Finding little ways to improve how quickly I can complete day-to-day tasks is a game that I constantly play. I realized recently that my morning routine of making breakfast follows the general principles of least-constrained optimization: toast starts first, then tea, then coffee (instant kettle FTW) because tea has to steep and toast has to, well, toast which takes the longest.</description>
    </item>
    
    <item>
      <title>Cellular Automata (part 2)</title>
      <link>https://chriskirkland.github.io/chriskirkland.us/post/cellular-automata-updates/</link>
      <pubDate>Thu, 17 Nov 2016 11:22:53 -0500</pubDate>
      
      <guid>https://chriskirkland.github.io/chriskirkland.us/post/cellular-automata-updates/</guid>
      <description>Goal Around two months ago, I created a blog post for my weekend project demonstrating 1-dimensional Cellulator Automata; you can see that post here. Since then, I&amp;rsquo;ve started looking more into more current Web Development technologies including some of the videos from Travis Nielson&amp;rsquo;s fantastic youtube channel addressing topics in Web Development and full process design. Through those videos, I was introduced to the preprocessing/templating languages Pug (formerly Jade) and Sass for HTML and CSS, respectively.</description>
    </item>
    
    <item>
      <title>Cellular Automata</title>
      <link>https://chriskirkland.github.io/chriskirkland.us/post/cellular-automata/</link>
      <pubDate>Mon, 26 Sep 2016 11:09:19 -0500</pubDate>
      
      <guid>https://chriskirkland.github.io/chriskirkland.us/post/cellular-automata/</guid>
      <description>Inspiration It has been several years since I&amp;rsquo;ve touched any front-end web technologies. Past projects included:
 Rebuilding the Mercer University Computer Science deparment website. Building a personal website for hosting syllabi, course materials, etc. while teaching in Grad school. This blog; built using Hugo which is technically cheating.  So recently I&amp;rsquo;ve been looking for an excuse to brush up on JavaScript, in particular. The inspiration for this side project came from this video from MPJ&amp;rsquo;s popular series &amp;ldquo;Fun Fun Function&amp;rdquo;; if you haven&amp;rsquo;t seen any of his videos already, shame on you.</description>
    </item>
    
    <item>
      <title>Python Thread IDs</title>
      <link>https://chriskirkland.github.io/chriskirkland.us/post/python-thread-ids/</link>
      <pubDate>Sun, 10 Jul 2016 20:27:18 -0500</pubDate>
      
      <guid>https://chriskirkland.github.io/chriskirkland.us/post/python-thread-ids/</guid>
      <description>Python threading module and thread IDs In multithreaded Python applications, keeping up with what is happening in each thread can be nonintuitive.
Context As a motivating example, consider the benchmark harness Rally. Rally makes heavy use of parallelism, through both the multiprocessing and threading Python modules, to provide concurrency for benchmarking. Consider a simple Rally scenario where the user wants to create a network, subnet, and boot a VM attached to that subnet.</description>
    </item>
    
    <item>
      <title>Python &#34;Thread-locality&#34;</title>
      <link>https://chriskirkland.github.io/chriskirkland.us/post/python-threads/</link>
      <pubDate>Mon, 20 Jun 2016 09:16:51 -0500</pubDate>
      
      <guid>https://chriskirkland.github.io/chriskirkland.us/post/python-threads/</guid>
      <description>Python threading module and thread-local objects The __init__() body of Python threading.Threads runs in the main thread. Any Thread-local setup must be done inside of the threading.Thread.run() body; for example, SQLAlchemy`s thread-local scoped_session must be invoked inside of each thread to avoid conflicts/race conditions/etc.
Here is a simple example:
### threading-example.py (python 2.6+) from threading import Thread, current_thread class BadThread(Thread): def __init__(self): Thread.__init__(self) self.current_thread = current_thread() def run(self): pass class GoodThread(Thread): def __init__(self): Thread.</description>
    </item>
    
  </channel>
</rss>